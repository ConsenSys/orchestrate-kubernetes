
commands:
  init:
    description: "Install"
    steps:
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          authenticator-release-tag: v0.5.1
          cluster-name: ${AWS_EKS_CLUSTER_NAME}
          cluster-authentication-role-arn: ${AWS_EKS_ROLE_ARN}
      - helm/install-helm-client:
          version: v3.3.4
      - run:
          name: Install helm plugins
          command: helm plugin install https://github.com/databus23/helm-diff
      - run:
          name: Install helmfile
          command: |
            curl -L --fail --retry 3 -o ./helmfile  https://github.com/roboll/helmfile/releases/download/v0.130.0/helmfile_linux_amd64
            chmod +x ./helmfile
            sudo mv ./helmfile /usr/local/bin/helmfile

parameters:
  target_namespace:
    type: string
    default: ${TARGET_NAMESPACE}
  orchestrate_tag:
    type: string
    default: ${ORCHESTRATE_TAG}
  e2e_tag:
    type: string
    default: ${E2E_TAG}
  orchestrate_repository:
    type: string
    default: ${ORCHESTRATE_REPOSITORY}
  e2e_repository:
    type: string
    default: ${E2E_REPOSITORY}
  registry_url:
    type: string
    default: ${REGISTRY_URL}
  registry_username:
    type: string
    default: ${REGISTRY_USERNAME}
  registry_password:
    type: string
    default: ${REGISTRY_PASSWORD}

jobs:
  lint:
    executor: aws-eks/python3
    environment:
      ORCHESTRATE_TAG: << pipeline.parameters.orchestrate_tag >>
      E2E_TAG: << pipeline.parameters.e2e_tag >>
      ORCHESTRATE_REPOSITORY: << pipeline.parameters.orchestrate_repository >>
      E2E_REPOSITORY: << pipeline.parameters.e2e_repository >>
      REGISTRY_URL: << pipeline.parameters.registry_url >>
      REGISTRY_USERNAME: << pipeline.parameters.registry_username >>
      REGISTRY_PASSWORD: << pipeline.parameters.registry_password >>
    steps:
      - init
      - run:
          name: helmfile lint
          command: helmfile -e << pipeline.parameters.target_namespace >> lint
  validate:
    executor: aws-eks/python3
    environment:
      ORCHESTRATE_TAG: << pipeline.parameters.orchestrate_tag >>
      E2E_TAG: << pipeline.parameters.e2e_tag >>
      ORCHESTRATE_REPOSITORY: << pipeline.parameters.orchestrate_repository >>
      E2E_REPOSITORY: << pipeline.parameters.e2e_repository >>
      REGISTRY_URL: << pipeline.parameters.registry_url >>
      REGISTRY_USERNAME: << pipeline.parameters.registry_username >>
      REGISTRY_PASSWORD: << pipeline.parameters.registry_password >>
    steps:
      - init
      - run:
          name: helmfile dry-run
          command: helmfile -e << pipeline.parameters.target_namespace >> apply --args --dry-run --suppress-secrets --detailed-exitcode=false
  deploy:
    executor: aws-eks/python3
    environment:
      ORCHESTRATE_TAG: << pipeline.parameters.orchestrate_tag >>
      E2E_TAG: << pipeline.parameters.e2e_tag >>
      ORCHESTRATE_REPOSITORY: << pipeline.parameters.orchestrate_repository >>
      E2E_REPOSITORY: << pipeline.parameters.e2e_repository >>
      REGISTRY_URL: << pipeline.parameters.registry_url >>
      REGISTRY_USERNAME: << pipeline.parameters.registry_username >>
      REGISTRY_PASSWORD: << pipeline.parameters.registry_password >>
    steps:
      - init
      - run:
          name: helmfile apply
          command: helmfile -e << pipeline.parameters.target_namespace >> apply --suppress-secrets --detailed-exitcode=false
  test:
    executor: aws-eks/python3
    steps:
      - init
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name: helm test
          command: helm test tx-crafter -n << pipeline.parameters.target_namespace >>
      - run:
          name: Extract report from volume
          when: always
          command: |
            kubectl run -n << pipeline.parameters.target_namespace >> tmp --image=alpine:3.12.0  --overrides='{ "kind": "Pod", "apiVersion": "v1", "spec": { "containers": [{ "name": "alpine", "image": "alpine:3.12.0", "stdin":true, "volumeMounts": [{ "mountPath": "/report/output", "name": "output" }] }], "volumes": [{ "name":"output", "persistentVolumeClaim":{ "claimName": "tx-crafter-output-pvc" } }], "restartPolicy": "Never" } }'
            for i in {1..10}; do kubectl cp << pipeline.parameters.target_namespace >>/tmp:/report/output/report.json $PWD/report.json && break; sleep 3; done
      - store_artifacts:
          path: report.json
      - run: 
          name: Cleanup helm test
          when: always
          command: |
            kubectl delete pod tx-crafter-test -n << pipeline.parameters.target_namespace >>  --force=true
            kubectl delete pod tmp -n << pipeline.parameters.target_namespace >> --force=true
      - run: 
          name: Prepare docker for build report
          when: always
          command: |
            echo ${REGISTRY_PASSWORD} | docker login docker.cloudsmith.io --username ${REGISTRY_USERNAME} --password-stdin
            docker pull docker.cloudsmith.io/consensys/docker-private/orchestrate-e2e-report:v0.0.2
      - run: 
          name: Build report
          when: always
          # Impossible to mount volumes with docker run (see https://circleci.com/docs/2.0/building-docker-images/)
          # Use docker cp instead
          command: |
            docker run --name tmp -it -d docker.cloudsmith.io/consensys/docker-private/orchestrate-e2e-report:v0.0.2 sh
            docker cp $PWD/report.json tmp:/usr/src/app/report.json 
            docker exec tmp npm start 
            docker cp tmp:/usr/src/app/report.html ./report.html 
      - store_artifacts:
          path: report.html

orbs:
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.1
  helm: circleci/helm@1.0.0

version: 2.1

workflows:
  default:
    jobs:
      - lint
      - validate:
          filters:
            branches:
              ignore:
                - master
          requires: 
            - lint
      - deploy:
          filters:
            branches:
              only:
                - master
          requires: 
            - lint
      - test:
          filters:
            branches:
              only:
                - master
          requires: 
            - deploy
