
commands:
  init:
    description: "Install"
    steps:
      - run:
          name: Import parameters
          # Inspired by https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-shell-command
          command: |
            [ "<< pipeline.parameters.environment_values >>" ] && echo 'export ENVIRONMENT_VALUES=<< pipeline.parameters.environment_values >>' >> $BASH_ENV
            [ "<< pipeline.parameters.orchestrate_namespace >>" ] && echo 'export ORCHESTRATE_NAMESPACE=<< pipeline.parameters.orchestrate_namespace >>' >> $BASH_ENV
            [ "<< pipeline.parameters.orchestrate_tag >>" ] && echo 'export ORCHESTRATE_TAG=<< pipeline.parameters.orchestrate_tag >>' >> $BASH_ENV
            [ "<< pipeline.parameters.test_tag >>" ] && echo 'export TEST_TAG=<< pipeline.parameters.test_tag >>' >> $BASH_ENV
            [ "<< pipeline.parameters.orchestrate_repository >>" ] && echo 'export ORCHESTRATE_REPOSITORY=<< pipeline.parameters.orchestrate_repository >>' >> $BASH_ENV
            [ "<< pipeline.parameters.test_repository >>" ] && echo 'export TEST_REPOSITORY=<< pipeline.parameters.test_repository >>' >> $BASH_ENV
            [ "<< pipeline.parameters.registry_url >>" ] && echo 'export REGISTRY_URL=<< pipeline.parameters.registry_url >>' >> $BASH_ENV
            [ "<< pipeline.parameters.registry_username >>" ] && echo 'export REGISTRY_USERNAME=<< pipeline.parameters.registry_username >>' >> $BASH_ENV
            [ "<< pipeline.parameters.registry_password >>" ] && echo 'export REGISTRY_PASSWORD=<< pipeline.parameters.registry_password >>' >> $BASH_ENV
            source $BASH_ENV || true
      - checkout
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          authenticator-release-tag: v0.5.1
          cluster-name: ${AWS_EKS_CLUSTER_NAME}
          cluster-authentication-role-arn: ${AWS_EKS_ROLE_ARN}
      - helm/install-helm-client:
          version: v3.3.4
      - run:
          name: Install helm plugins
          command: helm plugin install https://github.com/databus23/helm-diff
      - run:
          name: Install helmfile
          command: |
            curl -L --fail --retry 3 -o ./helmfile  https://github.com/roboll/helmfile/releases/download/v0.130.0/helmfile_linux_amd64
            chmod +x ./helmfile
            sudo mv ./helmfile /usr/local/bin/helmfile
  stress:
    description: "Run stress test"
    parameters:
      orchestrate_namespace:
        default: "staging"
        type: string
    steps:
      - when:
          condition:
            or:
              - equal: [ true, << pipeline.parameters.run_stress_test >> ]
              - equal: [ true, << pipeline.parameters.only_run_stress_test >> ]
          steps:
            - run:
                name: Configure test to stress
                command: helm upgrade orchestrate orchestrate -n <<parameters.orchestrate_namespace>> --repo https://artifacts.consensys.net/public/helm/helm/charts/ --version 1.0.0 --set test.cmd=stress,test.report.enabled=false --reuse-values
            - run:
                name: Run stress test
                command: helm test orchestrate -n <<parameters.orchestrate_namespace>> --logs --timeout 30m
            - run: 
                name: Cleanup helm test
                command: |
                  kubectl delete pod orchestrate-test -n <<parameters.orchestrate_namespace>> --force=true || true

parameters:
  environment_values:
    type: string
    default: ""  
  only_run_stress_test:
    type: boolean
    default: false
  run_stress_test:
    type: boolean
    default: false
  run_delete_namespace:
    type: boolean
    default: false
  orchestrate_namespace:
    type: string
    default: ""
  orchestrate_tag:
    type: string
    default: ""
  test_tag:
    type: string
    default: ""
  orchestrate_repository:
    type: string
    default: ""
  test_repository:
    type: string
    default: ""
  registry_url:
    type: string
    default: ""
  registry_username:
    type: string
    default: ""
  registry_password:
    type: string
    default: ""

jobs:
  lint:
    executor: aws-eks/python3
    steps:
      - init
      - run:
          name: helmfile lint
          command: helmfile -e ${ENVIRONMENT_VALUES} -f helmfile-core.yaml lint
  validate:
    executor: aws-eks/python3
    steps:
      - init
      - run:
          name: helmfile dry-run
          command: helmfile -e ${ENVIRONMENT_VALUES} -f helmfile-core.yaml apply --args --dry-run --suppress-secrets --detailed-exitcode=false
  deploy:
    executor: aws-eks/python3
    steps:
      - init
      - run:
          name: helmfile apply
          command: helmfile -e ${ENVIRONMENT_VALUES} -f helmfile-core.yaml apply --include-tests --suppress-secrets --detailed-exitcode=false --concurrency 1
      - when:
          condition:
            equal: [ default, << pipeline.parameters.environment_values >> ]
          steps:
            - run: 
                name: Annotate as disposable environement
                command: kubectl annotate --overwrite ns ${ORCHESTRATE_NAMESPACE} disposable=true
  tests:
    executor: aws-eks/python3
    steps:
      - init
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name: Configure test to e2e
          command: helm upgrade orchestrate orchestrate -n ${ORCHESTRATE_NAMESPACE} --repo https://artifacts.consensys.net/public/helm/helm/charts/ --version 1.0.0 --set test.cmd=e2e,test.report.enabled=true --reuse-values
      - run:
          name: Run e2e test
          command: helm test orchestrate -n ${ORCHESTRATE_NAMESPACE} --timeout 30m
      - run:
          name: Extract report from volume
          when: always
          command: |
            kubectl run -n ${ORCHESTRATE_NAMESPACE} tmp --image=alpine:3.12.0  --overrides='{ "kind": "Pod", "apiVersion": "v1", "spec": { "containers": [{ "name": "alpine", "image": "alpine:3.12.0", "stdin":true, "volumeMounts": [{ "mountPath": "/report/output", "name": "output" }] }], "volumes": [{ "name":"output", "persistentVolumeClaim":{ "claimName": "orchestrate-test-report-pvc" } }], "restartPolicy": "Never" } }'
            for i in {1..100}; do kubectl cp ${ORCHESTRATE_NAMESPACE}/tmp:/report/output/report.json $PWD/report.json && break; sleep 3; done
      - store_artifacts:
          path: report.json
      - run: 
          name: Cleanup helm test
          when: always
          command: |
            kubectl delete pod orchestrate-test -n ${ORCHESTRATE_NAMESPACE} --force=true || true
            kubectl delete pod tmp -n ${ORCHESTRATE_NAMESPACE} --force=true || true
      - run: 
          name: Prepare docker for build report
          when: always
          command: |
            echo ${REGISTRY_PASSWORD} | docker login ${REGISTRY_URL} --username ${REGISTRY_USERNAME} --password-stdin
            docker pull ${REPORT_REPOSITORY}
      - run: 
          name: Build report
          when: always
          # Impossible to mount volumes with docker run (see https://circleci.com/docs/2.0/building-docker-images/)
          # Use docker cp instead
          command: |
            docker run --name tmp -it -d ${REPORT_REPOSITORY} sh
            docker cp $PWD/report.json tmp:/usr/src/app/report.json 
            docker exec tmp npm start 
            docker cp tmp:/usr/src/app/report.html ./report.html 
      - store_artifacts:
          path: report.html
      - stress:
          orchestrate_namespace: ${ORCHESTRATE_NAMESPACE}
  stress:
    executor: aws-eks/python3
    steps:
      - init
      - stress:
          orchestrate_namespace: ${ORCHESTRATE_NAMESPACE}
  delete-namespace:
    executor: aws-eks/python3
    steps:
      - init
      - run:
          name: Delete namespace
          command: kubectl delete ns ${ORCHESTRATE_NAMESPACE}
  clean-namespaces:
    executor: aws-eks/python3
    steps:
      - init
      - run:
          name: Delete namespaces
          command: kubectl get ns -o go-template --template='{{range .items}}{{if .metadata.annotations.disposable}}{{if eq .metadata.annotations.disposable "true"}}{{.metadata.name}} {{.metadata.creationTimestamp}}{{"\n"}}{{end}}{{end}}{{end}}' | awk '$2 <= "'$(date -d'now-2 days' -Ins --utc | sed 's/+0000/Z/')'" { print $1 }' | xargs -r kubectl delete ns --grace-period=0 --force

orbs:
  aws-eks: circleci/aws-eks@1.0.0
  kubernetes: circleci/kubernetes@0.11.1
  helm: circleci/helm@1.2.0

version: 2.1

workflows:
  default:
    when:
      not: << pipeline.parameters.only_run_stress_test >>
    jobs:
      - lint:
          filters:
            branches:
              ignore:
                - master
      - validate:
          filters:
            branches:
              ignore:
                - master
          requires: 
            - lint
      - deploy:
          filters:
            branches:
              only:
                - master
      - tests:
          filters:
            branches:
              only:
                - master
          requires: 
            - deploy
  run-delete-namespace:
    when: << pipeline.parameters.run_delete_namespace >>
    jobs:
      - delete-namespace
  run-stress-test:
    when: << pipeline.parameters.only_run_stress_test >>
    jobs:
      - stress
  schedule-clean-namespaces:
    triggers:
      - schedule:
          cron: "0 5 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - clean-namespaces
  schedule-stress-test:
    triggers:
      - schedule:
          cron: "0 * * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - stress
